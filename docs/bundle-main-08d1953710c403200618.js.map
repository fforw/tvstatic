{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/./src/index.js","webpack://Demo/./src/loadImage.js","webpack://Demo/./src/static.vert","webpack://Demo/./src/static.frag"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Math","sqrt","PI","canvas","gl","u_time","u_wave","u_width","u_height","u_testImage","testTexture","config","width","height","wave","Float32Array","pos","main","time","cos","sin","uniform1f","uniform1fv","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","uniform1i","drawElements","TRIANGLES","indices","length","UNSIGNED_SHORT","requestAnimationFrame","vertices","resize","ev","window","innerWidth","innerHeight","viewport","onload","uri","Promise","resolve","reject","image","Image","src","onerror","then","testImage","console","log","document","getElementById","vertex_buffer","getContext","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","Index_Buffer","ELEMENT_ARRAY_BUFFER","Uint16Array","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragShader","FRAGMENT_SHADER","error","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getUniformLocation","useProgram","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","clearColor","enable","DEPTH_TEST","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","addEventListener","getProgramInfoLog"],"mappings":"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","file":"bundle-main-08d1953710c403200618.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\n\nimport staticFragmentShader from \"./static.frag\"\nimport staticVertexShader from \"./static.vert\"\nimport loadImage from \"./loadImage\";\n\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst TAU = Math.PI * 2;\nconst DEG2RAD_FACTOR = TAU / 360;\n\nconst config = {\n    width: 0,\n    height: 0\n};\n\nlet canvas, gl;\n\n\n// uniform: current time\nlet u_time;\n\nlet u_wave;\nlet u_width;\nlet u_height;\n\nlet u_testImage;\n\nlet testTexture;\n\n\nconst wave = new Float32Array(6);\n\nlet pos = 0;\n\nfunction main(time)\n{\n\n    /*============= Drawing the Quad ================*/\n\n    wave[0] = time * 0.0031;\n    wave[1] = time * -0.0007;\n    wave[2] = pos;\n    wave[3] = pos + 100;\n    wave[4] = Math.cos(time * 0.04) * 0.02 + 0.06;\n    wave[5] = 0.45 + Math.sin(time * 0.0003) * 0.25 + Math.cos(time * 0.0005) * 0.15;\n\n\n    pos = time * 0.1 % config.height;\n\n    gl.uniform1f(u_time, time);\n    gl.uniform1fv(u_wave, wave);\n    gl.uniform1f(u_width, config.width);\n    gl.uniform1f(u_height, config.height);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, testTexture);\n\n    gl.uniform1i(u_testImage, 0);\n\n\n\n    // Draw the triangle\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);\n\n    requestAnimationFrame(main);\n}\n\n\nconst vertices = [\n    -1, 1, 0.0,\n    -1, -1, 0.0,\n    1, -1, 0.0,\n    1, 1, 0.0\n];\n\nconst indices = [3, 2, 1, 3, 1, 0];\n\n\n\n\n\nfunction resize(ev)\n{\n    const width = (window.innerWidth) & ~15;\n    const height = (window.innerHeight) | 0;\n\n    config.width = width;\n    config.height = height;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nwindow.onload = () => loadImage(\"media/tv.png\").then( testImage => {\n\n    console.log(\"TEST\", testImage, testImage.width, testImage.height);\n\n    canvas = document.getElementById(\"screen\");\n\n    const width = (window.innerWidth) & ~15;\n    const height = (window.innerHeight) | 0;\n\n    config.width = width;\n    config.height = height;\n\n    canvas.width = width;\n    canvas.height = height;\n    /*============ Creating a canvas =================*/\n\n    gl = canvas.getContext(\"webgl\");\n\n    /*========== Defining and storing the geometry =========*/\n\n    // Create an empty buffer object to store vertex buffer\n    const vertex_buffer = gl.createBuffer();\n\n    // Bind appropriate array buffer to it\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n\n    // Pass the vertex data to the buffer\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n    // Unbind the buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    // Create an empty buffer object to store Index buffer\n    const Index_Buffer = gl.createBuffer();\n\n    // Bind appropriate array buffer to it\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Index_Buffer);\n\n    // Pass the vertex data to the buffer\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n    // Unbind the buffer\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n    /*====================== Shaders =======================*/\n\n    // Create a vertex shader object\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\n\n    // Attach vertex shader source code\n    gl.shaderSource(vertShader, staticVertexShader);\n\n    // Compile the vertex shader\n    gl.compileShader(vertShader);\n\n    // Create fragment shader object\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    // Attach fragment shader source code\n    gl.shaderSource(fragShader, staticFragmentShader);\n\n    // Compile the fragment shader\n    gl.compileShader(fragShader);\n\n    let error = false;\n    if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS))\n    {\n        console.error(\"Invalid vertex shader\", gl.getShaderInfoLog(vertShader));\n        error = true;\n    }\n    if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS))\n    {\n        console.error(\"Invalid fragment shader\", gl.getShaderInfoLog(fragShader));\n        error = true;\n    }\n\n    if (error)\n    {\n        return;\n    }\n\n    // Create a shader program object to\n    // store the combined shader program\n    const shaderProgram = gl.createProgram();\n\n    // Attach a vertex shader\n    gl.attachShader(shaderProgram, vertShader);\n\n    // Attach a fragment shader\n    gl.attachShader(shaderProgram, fragShader);\n\n    // Link both the programs\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))\n    {\n        console.error(gl.getProgramInfoLog(shaderProgram));\n        return;\n    }\n\n    u_time = gl.getUniformLocation(shaderProgram, \"time\");\n    u_wave = gl.getUniformLocation(shaderProgram, \"wave\");\n    u_testImage = gl.getUniformLocation(shaderProgram, \"testImage\");\n    u_width = gl.getUniformLocation(shaderProgram, \"width\");\n    u_height = gl.getUniformLocation(shaderProgram, \"height\");\n\n    // Use the combined shader program object\n    gl.useProgram(shaderProgram);\n\n    /* ======= Associating shaders to buffer objects =======*/\n\n    // Bind vertex buffer object\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n\n    // Bind index buffer object\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Index_Buffer);\n\n    // Get the attribute location\n    const coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\n\n    // Point an attribute to the currently bound VBO\n    gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\n\n    // Enable the attribute\n    gl.enableVertexAttribArray(coord);\n\n    // Clear the canvas\n    gl.clearColor(0,0,0,1);\n\n    // Enable the depth test\n    gl.enable(gl.DEPTH_TEST);\n\n    // Clear the color buffer bit\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Set the view port\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    // TEXTURE\n\n\n    testTexture = gl.createTexture();\n    // gl.bindTexture(gl.TEXTURE_2D, testTexture);\n    // // Fill the texture with a 1x1 blue pixel.\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n    //     new Uint8Array([0, 0, 255, 255]));\n\n    gl.bindTexture(gl.TEXTURE_2D, testTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, testImage);\n    gl.generateMipmap(gl.TEXTURE_2D);\n\n    // testTexture = gl.createTexture();\n    // gl.bindTexture(gl.TEXTURE_2D, testTexture);\n    //\n    // // Set the parameters so we can render any size image.\n    // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // // Upload the image into the texture.\n    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, testImage);\n    // gl.generateMipmap(gl.TEXTURE_2D);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, testTexture);\n\n    gl.uniform1i(u_testImage, 0);\n    window.addEventListener(\"resize\", resize, true);\n\n    requestAnimationFrame(main);\n})\n;\n\n","export default function loadImage(uri)\n{\n    return new Promise((resolve, reject) => {\n\n        const image = new Image();\n        image.src = uri;\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n    });\n}\n","export default \"#define GLSLIFY 1\\nattribute vec3 coordinates;\\nvoid main(void) {\\n    gl_Position = vec4(coordinates, 1.0);\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform float time;\\nuniform float wave[6];\\nuniform float width;\\nuniform float height;\\n\\nuniform sampler2D testImage;\\n\\n// Simplex 2D noise\\n//\\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\\n\\nfloat snoise(vec2 v){\\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\\n    -0.577350269189626, 0.024390243902439);\\n    vec2 i  = floor(v + dot(v, C.yy) );\\n    vec2 x0 = v -   i + dot(i, C.xx);\\n    vec2 i1;\\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n    vec4 x12 = x0.xyxy + C.xxzz;\\n    x12.xy -= i1;\\n    i = mod(i, 289.0);\\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\\n    dot(x12.zw,x12.zw)), 0.0);\\n    m = m*m ;\\n    m = m*m ;\\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n    vec3 h = abs(x) - 0.5;\\n    vec3 ox = floor(x + 0.5);\\n    vec3 a0 = x - ox;\\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n    vec3 g;\\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n    return 130.0 * dot(m, g);\\n}\\n\\nfloat noise(vec2 v){\\n    float value = snoise(v);\\n    if (v.x > -2.0 && v.x < 2.0)\\n    {\\n        value *= 0.2;\\n    }\\n    return value;\\n}\\n\\nvoid main(void) {\\n\\n    //float signalToNoise = 0.5;\\n    float signalToNoise = wave[5];\\n    float colorOffset = 0.7;\\n\\n    float n0 = noise(vec2(time * 0.17,time * 0.31));\\n    float offset = n0 * 100.0;\\n\\n    float y = gl_FragCoord.y/gl_FragCoord.w;\\n\\n    float hOff = -50.0 + 50.0 * sin(wave[0] + y * 0.01) + 33.0 * sin(wave[1] + y * (y >= wave[2] && y <= wave[3] ? wave[4]: 0.013));\\n\\n    float x = (gl_FragCoord.x + hOff)/gl_FragCoord.w;\\n\\n    vec3 noiseColor = vec3(\\n        noise(vec2(x * 0.2 + offset, y * 0.2) - offset),\\n        noise(vec2(x * 0.2 + offset + colorOffset, y * 0.2) - offset),\\n        noise(vec2(x * 0.2 + offset, y * 0.2) - offset + colorOffset)\\n    );\\n\\n    float tx = ((gl_FragCoord.x + hOff) / width);\\n    float ty = 1.0 - (gl_FragCoord.y / height);\\n\\n    gl_FragColor = vec4(noiseColor * (1.0 - signalToNoise) + texture2D(testImage, vec2(tx,ty)).xyz * signalToNoise, 1);\\n}\\n\\n\";"],"sourceRoot":""}